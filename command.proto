syntax = "proto3";
package commander;

enum Head {
    cmd = 0;

    init = 0xFF00;
    bodyinfo = 0xFF01;
    bodystatus = 0xFF02;
    bodyop = 0xFF03;
    query = 0xFF04;
    bodyinfoquery = 0xFF05;

    cobject = 0xFF06;

    contact = 0xF0F0;
    event = 0xF0F1;
    key = 0xF0F2;
    ack = 0xF0F3;
    directional = 0xF0F4;
    button = 0xF0F5;
    tab = 0xF0F6;
    queryresult = 0xF0F7;
    bodyinfoqueryresult = 0xF0F8;
}

message BodyInfoQuery {
    uint32 qid = 1;
}

message BodyInfoQueryResult {
    uint32 qid = 1;
    float x = 2;
    float y = 3;     
}

message QueryInfo {
    uint32 qid = 1;
    float ax = 2;
    float ay = 3;
    float bx = 4;
    float by = 5;
    uint32 max = 6;
    bool trackableOnly = 7;
}


enum BodyShape { 
    rectangle = 0; 
    actor = 1;
    circle = 2;
    triangle = 3;
    edge = 4;
    polygon = 5;
}

enum BodyType { 
    static = 0; 
    kinematic = 1; 
    dynamic = 2;
}

enum CActionType {
    idle = 0;
    run = 1;
    jump = 2;
    hit = 3;
    fall = 4;
    wallJump = 5;
    doubleJump = 6;
    hitSide = 7;
    hitTop = 8;
    off = 9;
    on = 10;
    blink = 11;
    hitLeft = 12;
    hitRight = 13;
    hitBottom = 14;
    noChange = 15;
    tiles = 16;
    svg = 17;
}

enum BodyOp {
    linearVelocity = 0;
    angularVelocity = 1;
    force = 2;
    linearImpulse = 3;
    torque = 4;
    xConstantVelocity = 5;
    yConstantVelocity = 6;
    xLinearVelocity = 7;    
    yLinearVelocity = 8;
    constantVelocity = 9;
    action = 10;
    remove = 11;
    follow = 12;
}

message ContactInfo {
    uint32 id1 = 1;
    uint32 id2 = 2;
    string info1 = 3;
    string info2 = 4;
    float x = 7;
    float y = 8;
    float x1 = 9;
    float y1 = 10;
    float x2 = 11;
    float y2 = 12;
    bool isEnded = 13;
}

message EventInfo {
    uint32 id = 1;
    string name = 2;
    string skin = 3;
    float x = 4;
    float y = 5;
    bool isCompleted = 6;
}

message KeyInfo {
    string name = 1;
    bool isPressed = 2;
}

message AckInfo {
    string info = 1;
    uint32 code = 2;
}

enum JoystickMoveDirectional {
    MOVE_UP = 0;
    MOVE_UP_LEFT = 1;
    MOVE_UP_RIGHT = 2;
    MOVE_RIGHT = 3;
    MOVE_DOWN = 4;
    MOVE_DOWN_RIGHT = 5;
    MOVE_DOWN_LEFT = 6;
    MOVE_LEFT = 7;
    IDLE = 8;
}

enum ActionEvent { 
    DOWN = 0;
    UP = 1;
    MOVE = 2;
    NONE = 3;
    UP_DOWN = 4;
    DOWN_MOVE = 5;
    ALL = 6;
    UP_MOVE = 7;    
}

enum TouchInputId {
    joystickInput = 0;
    button1Input = 1;
    button2Input = 2;
    tabInput = 3;
}

message DirectionalInfo {
    TouchInputId iid = 1;
    JoystickMoveDirectional direction = 2;    
    double intensity = 3;
    double radAngle = 4;
}

message ButtonInfo {
    TouchInputId iid = 1;
    ActionEvent event = 2;
}

message TabInfo {
    TouchInputId iid = 1;
    ActionEvent event = 2;
    double x = 3;
    double y = 4;
}

message ObjectPosition {
    uint32 id = 1;
    double x = 2;
    double y = 3;
}

message QueryResult {
    uint32 qid = 1;
    repeated ObjectPosition objs = 2;
}

message CmdInfo {
    Head head = 1;
    ContactInfo contact = 2;
    EventInfo event = 3;
    KeyInfo key = 4;
    AckInfo ack = 5;
    DirectionalInfo directional = 6;
    ButtonInfo button = 7;
    TabInfo tab = 8;
    QueryResult result = 9;
    BodyInfoQueryResult bodyinfo = 10;
    Cmd cmd = 11;
}

enum JoystickDirectionals {
    none = 0;
    all = 1;
    horizontal = 2;
    vertical = 3;
}

message InitInfo {
    string background = 1;
    double gravityX = 2;
    double gravityY = 3;
    double width = 4;
    double height = 5;
    bool debug = 6;
    JoystickDirectionals joystickDirectionals = 7;    
    uint32 joystickPrecision = 8;
    ActionEvent button1 = 9;    
    ActionEvent button2 = 10;
    ActionEvent tab = 11;    
    repeated int32 tiles = 12;
}

enum CmdType {
	RAWKEYDOWN = 0;
	RAWKEYUP = 1;
	COMMAND2 = 2;
	COMMAND3 = 3;
	COMMAND4 = 4;
	COMMAND5 = 5;
	COMMAND6 = 6;
	COMMAND7 = 7;
	COMMAND8 = 8;
	COMMAND9 = 9;
	MAPORIGINAL = 10;
	MAP = 11;
	ACK = 12;
	ACK2 = 13;
	HERO = 14;		
	READY = 15;
	INIT = 16;
}

message Cmd {
	CmdType cmd = 1;
	repeated int32 ints = 2;
	repeated float floats = 3;
	repeated string strings = 4;
    Cmd sub = 5;
}


//================================================


message CObject {
    uint32 id = 1;
    optional CPhysical physical = 2;
    optional CVisible visible = 3;
    uint32 tid = 4;
    string info = 5;
}

message CVisible {
    CActionType current	= 1;
    uint32	priority = 2;	
    double	x = 3;
    double	y = 4;
    double	width = 5;	
    double	height = 6;
    double	scaleX = 7;	
    double	scaleY = 8;
    double anchorX = 9;
    double anchorY = 10; 
    repeated CAction actions = 11;
}

message CAction {
    string	path = 1;
    double	tileSizeX = 2;
    double	tileSizeY = 3;
    repeated uint32	indices = 4;
    double	stepTime = 5;
    CActionType type = 6;
    bool repeat = 7;
}

message CPhysical {
    BodyType type = 1;    
    BodyShape shape = 2;
    float x = 3;
    float y = 4;
    float width = 5;
    float height = 6;
    float restitution = 7;
    float friction = 8;
    float density = 9;
    float angle = 10;
    bool isSensor = 11;
    uint32 categoryBits = 12;
    uint32 maskBits = 13;
    bool fixedRotation = 14;
    bool trackable = 15;
    bool contactReport = 16;
    repeated float floats = 17;
    bool passableBottom = 18;
}
